{"ast":null,"code":"import { API } from '../config';\nexport const createCategory = (userId, token, category) => {\n  return fetch(`${API}/category/create/${userId}`, {\n    //fetch(url,object)\n    method: \"POST\",\n    headers: {\n      Accept: 'application/json',\n      //tells the server that which content-type is understandable by the client \n      \"Content-Type\": \"application/json\",\n      //this tells backend that we are sending a json object\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(category)\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const createProduct = (userId, token, product) => {\n  return fetch(`${API}/product/create/${userId}`, {\n    //fetch(url,object)\n    method: \"POST\",\n    headers: {\n      Accept: 'application/json',\n      //tells the server that which content-type is understandable by the client \n      //\"Content-Type\" : \"application/json\", //we don't need this here as we are sending form data here and not json\n      Authorization: `Bearer ${token}`\n    },\n    body: product //product will be form-data\n\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getCategories = () => {\n  return fetch(`${API}/categories`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listOrders = (userId, token) => {\n  return fetch(`${API}/order/list/${userId}`, {\n    method: \"GET\",\n    headers: {\n      Accept: 'application/json',\n      //tells the server that which content-type is understandable by the client         \n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const getStatusValues = (userId, token) => {\n  return fetch(`${API}/order/status-values/${userId}`, {\n    method: \"GET\",\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateOrderStatus = (userId, token, orderId, status) => {\n  return fetch(`${API}/order/:${orderId}/status/${userId}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: 'application/json',\n      \"Content-Type\": 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      orderId,\n      status\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n/* working on Manage Products component */\n\nexport const getProducts = () => {\n  return fetch(`${API}/products`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const deleteProduct = (productId, userId, token) => {\n  return fetch(`${API}/product/${productId}/${userId}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: 'application/json',\n      \"Content-Type\": 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const getProduct = productId => {\n  return fetch(`${API}/product/${productId}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateProduct = (productId, userId, token, product) => {\n  return fetch(`${API}/product/:${productId}/${userId}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: product //this product is sent as form-data.So , sontent-type is not  defined\n\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["D:/B Tech/WebD/ecommerce-frontend/src/admin/apiAdmin.js"],"names":["API","createCategory","userId","token","category","fetch","method","headers","Accept","Authorization","body","JSON","stringify","then","response","json","catch","err","console","log","createProduct","product","getCategories","listOrders","getStatusValues","updateOrderStatus","orderId","status","getProducts","deleteProduct","productId","getProduct","updateProduct"],"mappings":"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","sourcesContent":["import {API} from '../config';\r\n\r\nexport const createCategory=(userId,token,category)=>{    \r\n    return fetch(`${API}/category/create/${userId}`,{             //fetch(url,object)\r\n        method:\"POST\",      \r\n        headers:{\r\n            Accept:'application/json',          //tells the server that which content-type is understandable by the client \r\n            \"Content-Type\" : \"application/json\",    //this tells backend that we are sending a json object\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(category)\r\n    })\r\n        .then(response=>{\r\n            return response.json();\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        });\r\n};\r\n\r\n\r\nexport const createProduct=(userId,token,product)=>{    \r\n    return fetch(`${API}/product/create/${userId}`,{             //fetch(url,object)\r\n        method:\"POST\",      \r\n        headers:{\r\n            Accept:'application/json',          //tells the server that which content-type is understandable by the client \r\n            //\"Content-Type\" : \"application/json\", //we don't need this here as we are sending form data here and not json\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: product   //product will be form-data\r\n    })\r\n        .then(response=>{\r\n            return response.json();\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        });\r\n};\r\n\r\n\r\n\r\nexport const getCategories=()=>{\r\n    return fetch(`${API}/categories`,{\r\n        method: \"GET\"\r\n    })\r\n    .then(response=>{\r\n        return response.json();\r\n    })\r\n    .catch(err=>console.log(err));\r\n}\r\n\r\n\r\n\r\nexport const listOrders=(userId,token)=>{\r\n    return fetch(`${API}/order/list/${userId}`,{\r\n        method: \"GET\",\r\n        headers:{\r\n            Accept:'application/json',          //tells the server that which content-type is understandable by the client         \r\n            Authorization: `Bearer ${token}`\r\n        },\r\n    })\r\n    .then(response=>{\r\n        return response.json();\r\n    })\r\n    .catch(err=>console.log(err));\r\n}\r\n\r\n\r\n\r\n\r\nexport const getStatusValues=(userId,token)=>{\r\n    return fetch(`${API}/order/status-values/${userId}`,{\r\n        method: \"GET\",\r\n        headers:{\r\n            Accept:'application/json',       \r\n            Authorization: `Bearer ${token}`\r\n        },\r\n    })\r\n    .then(response=>{\r\n        return response.json();\r\n    })\r\n    .catch(err=>console.log(err));\r\n};\r\n\r\n\r\n\r\n\r\nexport const updateOrderStatus=(userId,token,orderId,status)=>{\r\n    return fetch(`${API}/order/:${orderId}/status/${userId}`,{\r\n        method: \"PUT\",\r\n        headers:{\r\n            Accept:'application/json',  \r\n            \"Content-Type\": 'application/json' ,    \r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({orderId,status})\r\n    })\r\n    .then(response=>{\r\n        return response.json();\r\n    })\r\n    .catch(err=>console.log(err));\r\n};\r\n\r\n\r\n/* working on Manage Products component */\r\n\r\n\r\nexport const getProducts=()=>{\r\n    return fetch(`${API}/products`,{\r\n        method: \"GET\"\r\n    })\r\n    .then(response=>{\r\n        return response.json();\r\n    })\r\n    .catch(err=>console.log(err));\r\n};\r\n\r\n\r\nexport const deleteProduct=(productId,userId,token)=>{\r\n    return fetch(`${API}/product/${productId}/${userId}`,{\r\n        method: \"DELETE\",\r\n        headers:{\r\n            Accept:'application/json',  \r\n            \"Content-Type\": 'application/json' ,    \r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n    .then(response=>{\r\n        return response.json();\r\n    })\r\n    .catch(err=>console.log(err));\r\n};\r\n\r\nexport const getProduct=productId=>{\r\n    return fetch(`${API}/product/${productId}`,{\r\n        method: \"GET\"\r\n    })\r\n    .then(response=>{\r\n        return response.json();\r\n    })\r\n    .catch(err=>console.log(err));\r\n};\r\n\r\n\r\nexport const updateProduct=(productId,userId,token,product)=>{\r\n    return fetch(`${API}/product/:${productId}/${userId}`,{\r\n        method: \"PUT\",\r\n        headers:{\r\n            Accept:'application/json',    \r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: product               //this product is sent as form-data.So , sontent-type is not  defined\r\n    })\r\n    .then(response=>{\r\n        return response.json();\r\n    })\r\n    .catch(err=>console.log(err));\r\n};"]},"metadata":{},"sourceType":"module"}
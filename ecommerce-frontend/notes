(frontend to frontend :response ko return krne pe promise ki tarah use kiya jaa skta hai)
(backend to frontend : response ko response object me kr k bheho (bina return k), tab frontend
    ko wo mil jayega response ki tarah)
setting up the react app:-
-> npx create-react-app ecommerce-frontend
    then remove all the files from src except for App.js and index.js . Remove all extra things from
    both the files as well. 

-> npm i react-router-dom
    https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom/docs/api
    BrowserRouter is the router implementation for HTML5 browsers (vs Native).
        A <Router> that uses the HTML5 history API (pushState, replaceState and the 
        popstate event) to keep your UI in sync with the URL.
        <Router>:-The common low-level interface for all router components
    Link is your replacement for anchor tags. in place of "href" it uses "to"
    Route is the conditionally shown component based on matching a path to a URL.Its most basic 
        responsibility is to render some UI when its path matches the current URL.
    Switch returns only the first matching route rather than all matching routes. 
    You can get access to the history object's properties and the closest <Route>'s match via the 
    withRouter higher-order component. withRouter will pass updated match, location, and history 
    props to the wrapped component whenever it renders.   
    Redirect-> Rendering a <Redirect> will navigate to a new location. The new location will 
    override the current location in the history stack, like server-side redirects (HTTP 3xx) do.

-> npm i query-string
    Converts a JSON object into string that can be directly used in url

-> npm i moment
    https://momentjs.com/


*exact: bool
    When true, will only match if the path matches the location.pathname exactly.

*Fragments
    A common pattern in React is for a component to return multiple elements. Fragments let you group 
    a list of children without adding extra nodes to the DOM. 
    Short syntax for this:- You can use <></> the same way you’d use any other element except that it 
    doesn’t support keys or attributes.

   

**Components let you split the UI into independent, reusable pieces, and think about each piece in 
    isolation.Conceptually, components are like JavaScript functions. They accept arbitrary inputs 
    (called “props”) and return React elements describing what should appear on the screen.    

<route component> would create a new component every render.
e.g-> 
// All route props (match, location and history) are available to User
function User(props) {
  return <h1>Hello {props.match.params.username}!</h1>;
}

ReactDOM.render(
  <Router>
    <Route path="/user/:username" component={User} />
  </Router>,
  node
);

*For all the react components , the first letter is kept capital(convention)    

***A component is basically a class containing: props,data,state (manipulated via setState()),
    markup (delivered by render())

* if default keyword is used in exporting a function, that function can be imported without using
    curly braces (called, default export). If default is not used, it is named export and curly
    braces are used at the time of impoting.       


*** If we want to use a fun defined inside the same component, we write it like:- {fun()}
    If we want to use one component in another we write like:- <component />
*** Higher order function is a function returning another function.    

***React event handlers are written inside curly braces:
            onClick={shoot}  instead of onClick="shoot()".
            React:  <button onClick={shoot}>Take the Shot!</button>
            HTML:   <button onclick="shoot()">Take the Shot!</button>
    However, for other things like "style" , we call the function,i.e., 
        styl="fun()"        

*** Anything written in cruly braces in JSX denotes a jsx object/variable            

*** local storage is a property of browser's window object


** named export vs default export
-> named export:- With named exports, one can have multiple named exports per file. Then import the 
                  specific exports they want surrounded in braces. The name of imported module has to 
                  be the same as the name of the exported module.
                  syntax:-          export componentName;


-> Default Export:- One can have only one default export per file. When we import we have to specify a 
                    name(this need not be the name specified at the time of export). 
                    syntax:-        export default componentName;


-The purpose of a destructor is to allow the item that registered the listeners to unregister them. 
Once an object has no other references to it, it will be garbage collected.                    

**Syntax alert:-
const value= (name===photo? event.target.files[0] : event.target.value );
see the different ways to deal with text and files

**If we need to pass a parameter(like name,email,id,etc) in event handlers , then we need to make the 
handleChange a higher order function... else it can be a normal function. This is because event handlers
take in a function reference(fun and not fun()) as their value and not a function call(fun())




*****Super important:-
if we are making an api request from frontend to backend, we use fetch()
this fun() has 2 arguments, 1st one is the url and the second one is an object. This object has several
info like:- the method (get,post,put,delete...), header (which has info on type of content,and token(if 
required)), and body.
anything we send in body can be accessed by backend by req.body . Make sure to stringify the JSON before
sending from frontend to backend.


/*for setting up braintree*/
-> npm i braintree-web-drop-in-react


/*
if "props" is used as parameter/argument of a component , then it helps in accessing contents of URL
as well; e.g.-> props.match.params.userId gives us the user name mentioned in the URL